Ejercicio #1: Construcción del índice en un trie
1. Estructura de datos
NodoTrie

hijos[26] → referencias a nodos de las letras ‘a’…‘z’ (null si no existe).

paginas → lista (o conjunto) de enteros, las páginas donde aparece la palabra que termina en este nodo.

esPalabra → booleano: marca que aquí acaba al menos una palabra.

2. Descripción en lenguaje natural
Recorremos cada palabra y sus páginas asociadas. Para cada palabra:

Bajamos por el trie letra a letra, creando nodos si hacen falta.

Al llegar al último carácter, marcamos el nodo como palabra y añadimos a su lista todas
las páginas dadas (sin duplicados).

3. Precondiciones y postcondiciones
Pre: lista de pares (palabra en minúsculas, lista de páginas positivas).

Post: un trie que indexa todas las palabras; cada nodo final guarda correctamente las páginas.

4. Pseudocódigo


InsertarPalabra(trieRoot, palabra, listaPag):
  nodo ← trieRoot
  Para i desde 0 hasta |palabra|-1:
    idx ← palabra[i] - 'a'
    Si nodo.hijos[idx] es null:
      nodo.hijos[idx] ← NuevoNodo()
    nodo ← nodo.hijos[idx]
  nodo.esPalabra ← true
  Para cada p en listaPag:
    Si p ∉ nodo.paginas:
      nodo.paginas.agregar(p)


5. Orden
Por palabra de longitud m y lista de k páginas: Θ(m + k).

Para N palabras totales (sumando longitudes M y páginas totales P): Θ(M + P).

6. Ejemplo de construcción (datos de prueba)
Palabra	Páginas
ala	1, 3, 88
alimaña	11, 22
alabastro	4
perro	5, 8
pera	7, 12
alimento	9
casa	11, 13
casada	1
cazar	33
programa	22, 67
programación	15
programar	15, 16

Tras insertar todas, el trie tendrá rutas como:

raiz
 ├─ a → l → a •{1,3,88}
 │         └─ b→...→ o •{4}
 │         └─ i→m→a→ñ→a •{11,22}
 │         └─ i→m→e→n→t→o •{9}
 ├─ c → a → s → a→d→a •{1}
 │           └→   →  •{11,13}
 │       └─ z→a→r •{33}
 └─ p → e→r→r→o •{5,8}
         └→ a→m→a→ ... (p→r→o→g→r→a→m→a •{22,67}; ...)


7. Respuestas a preguntas
Comparaciones al buscar “programa”
Se sigue la ruta ‘p’–‘r’–‘o’–‘g’–‘r’–‘a’–‘m’–‘a’: 8 comparaciones de hijo no null.

Comparaciones al buscar “proselitismo”
Tiene prefijo “pro” → 3 comparaciones, pero al llegar a ‘s’ hijos['s'] será null: 4 comparaciones (p–r–o–s).

Comparaciones al insertar “cazadores”
Longitud 9 letras: crea o recorre 9 enlaces → 9 pasos (más el chequeo/añadido de página).

Altura del trie resultante
Nivel máximo (longitud) de la palabra más larga. “programación” → 12 caracteres → altura = 12.

Tamaño del trie
Número total de nodos creados. Con los datos dados salen unos ≈ 55 nodos (cada prefijo aporta
 uno, descontando solapamientos).

