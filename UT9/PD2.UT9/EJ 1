1. Tres combinaciones de incrementos:
a) Secuencia de Knuth:

Fórmula: (3^k - 1)/2 = 1, 4, 13, 40, 121, 364...
Implementación: h = 1; while (h < n/3) h = 3*h + 1 Princeton

b) Secuencia de Hibbard:

Fórmula: 2^k - 1 = 1, 3, 7, 15, 31, 63, 127...
Tiene complejidad O(n^3/2) en el peor caso

Fuente: MaxGCoding.com - Shellsort: A Sorting Enigma

c) Secuencia de Ciura:

Secuencia empírica: 1, 4, 10, 23, 57, 132, 301, 701...

Fuente: algorithm - Fastest gap sequence for shell sort? - Stack Overflow

2. Análisis del tiempo de ejecución:

Mejor caso: O(n log n)
Caso promedio: Depende de la secuencia de incrementos
Peor caso: O(n²) con la secuencia original de Shell, O(n^4/3) con Knuth, O(n^3/2) con Hibbard

Fuente: MaxGCoding.com - Shellsort: A Sorting Enigma

3. Ordenamiento del conjunto [256, 458, 655, 298, 043, 648, 778, 621, 655, 019, 124, 847]:
Con Knuth (h = 4, 1):
h=4: [043, 458, 655, 298, 256, 648, 778, 621, 655, 019, 124, 847]
h=1: [019, 043, 124, 256, 298, 458, 621, 648, 655, 655, 778, 847]